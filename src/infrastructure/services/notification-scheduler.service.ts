// src/infrastructure/services/notification-scheduler.service.ts
import * as cron from 'node-cron';
import { IDeviceTokenRepository } from '../../domain/interfaces/repositories/device-token-repository.interface';
import { ExpoPushService } from './expo-push-service';

export class NotificationSchedulerService {
  private isSchedulerRunning = false;
  private scheduledTasks: cron.ScheduledTask[] = [];

  constructor(
    private readonly deviceTokenRepository: IDeviceTokenRepository,
    private readonly expoPushService: ExpoPushService
  ) {}

  // Iniciar scheduler de limpeza autom√°tica
  startScheduler(): void {
    if (this.isSchedulerRunning) {
      console.log('‚ö†Ô∏è Notification Scheduler j√° est√° rodando');
      return;
    }

    console.log('üöÄ Iniciando Notification Scheduler...');

    // Limpeza di√°ria √†s 2h da manh√£
    const cleanupTask = cron.schedule('0 2 * * *', async () => {
      console.log('üßπ [SCHEDULER] Iniciando limpeza autom√°tica de tokens...');
      await this.cleanupExpiredTokens();
    }, {
      timezone: 'America/Sao_Paulo'
    });

    // Health check do Expo Push Service a cada 6 horas
    const healthCheckTask = cron.schedule('0 */6 * * *', async () => {
      console.log('üè• [SCHEDULER] Executando health check do Expo Push Service...');
      await this.healthCheck();
    }, {
      timezone: 'America/Sao_Paulo'
    });

    // Relat√≥rio de estat√≠sticas di√°rio √†s 8h
    const statsTask = cron.schedule('0 8 * * *', async () => {
      console.log('üìä [SCHEDULER] Gerando relat√≥rio de estat√≠sticas...');
      await this.generateDailyStats();
    }, {
      timezone: 'America/Sao_Paulo'
    });

    // As tarefas j√° iniciam automaticamente por padr√£o

    // Salvar refer√™ncias das tarefas
    this.scheduledTasks = [cleanupTask, healthCheckTask, statsTask];
    this.isSchedulerRunning = true;

    console.log('‚úÖ Notification Scheduler iniciado com sucesso');
    console.log('‚è∞ Tarefas agendadas:');
    console.log('   - Limpeza de tokens: 02:00 (di√°rio)');
    console.log('   - Health check: a cada 6 horas');
    console.log('   - Relat√≥rio de stats: 08:00 (di√°rio)');
  }

  // Parar scheduler
  stopScheduler(): void {
    if (!this.isSchedulerRunning) {
      console.log('‚ö†Ô∏è Scheduler n√£o est√° rodando');
      return;
    }
    
    // Parar todas as tarefas agendadas
    this.scheduledTasks.forEach(task => {
      task.stop();
      task.destroy();
    });
    
    this.scheduledTasks = [];
    this.isSchedulerRunning = false;
    console.log('üõë Notification Scheduler parado');
  }

  // Limpeza manual de tokens expirados
  async cleanupExpiredTokens(): Promise<{ removed: number }> {
    try {
      console.log('üßπ Iniciando limpeza de tokens expirados...');
      
      const cleanupDays = parseInt(process.env.TOKEN_CLEANUP_DAYS || '90');
      const removedCount = await this.deviceTokenRepository.cleanupOldTokens(cleanupDays);
      
      console.log(`‚úÖ Limpeza conclu√≠da: ${removedCount} tokens antigos removidos`);
      
      return { removed: removedCount };
    } catch (error) {
      console.error('‚ùå Erro na limpeza autom√°tica:', error);
      return { removed: 0 };
    }
  }

  // Health check do servi√ßo
  async healthCheck(): Promise<boolean> {
    try {
      const isHealthy = await this.expoPushService.healthCheck();
      
      if (isHealthy) {
        console.log('‚úÖ [HEALTH] Expo Push Service est√° funcionando corretamente');
      } else {
        console.error('‚ùå [HEALTH] Expo Push Service com problemas');
        // Aqui voc√™ poderia enviar alertas para administradores
        // await this.sendAdminAlert('Expo Push Service com problemas');
      }
      
      return isHealthy;
    } catch (error) {
      console.error('‚ùå [HEALTH] Erro no health check:', error);
      return false;
    }
  }

  // Gerar estat√≠sticas di√°rias
  async generateDailyStats(): Promise<void> {
    try {
      console.log('üìä [STATS] Gerando relat√≥rio de estat√≠sticas di√°rias...');
      
      if (this.deviceTokenRepository.getGeneralStats) {
        const stats = await this.deviceTokenRepository.getGeneralStats();
        
        console.log('üìä [STATS] Relat√≥rio do dia:');
        console.log(`   üì± Total de tokens: ${stats.totalTokens}`);
        console.log(`   ‚úÖ Tokens ativos: ${stats.activeTokens}`);
        console.log(`   üçé Dispositivos iOS: ${stats.iosTokens}`);
        console.log(`   ü§ñ Dispositivos Android: ${stats.androidTokens}`);
        
        // Calcular porcentagens
        const activePercentage = stats.totalTokens > 0 
          ? ((stats.activeTokens / stats.totalTokens) * 100).toFixed(1) 
          : '0';
        
        console.log(`   üìà Taxa de tokens ativos: ${activePercentage}%`);
        
        // Voc√™ poderia salvar essas estat√≠sticas em um banco de dados
        // ou enviar para um sistema de monitoramento
      }
    } catch (error) {
      console.error('‚ùå [STATS] Erro ao gerar estat√≠sticas:', error);
    }
  }

  // Enviar notifica√ß√£o de teste
  async sendTestNotification(): Promise<{ success: boolean, tokensUsed: number }> {
    try {
      console.log('üß™ Enviando notifica√ß√£o de teste...');
      
      // Buscar um pequeno conjunto de tokens v√°lidos para teste
      const activeTokens = await this.deviceTokenRepository.findAllActiveTokens();
      
      if (activeTokens.length === 0) {
        console.log('üì≠ Nenhum token ativo para teste');
        return { success: false, tokensUsed: 0 };
      }

      // Usar apenas os primeiros 5 tokens para teste
      const testTokens = activeTokens.slice(0, 5).map(deviceToken => deviceToken.token);
      
      await this.expoPushService.sendNotificationToTokens(
        testTokens,
        'üß™ Teste do Sistema',
        'Esta √© uma notifica√ß√£o de teste do sistema de push notifications com Expo',
        { 
          type: 'test', 
          timestamp: new Date().toISOString(),
          service: 'expo-push-notifications'
        }
      );
      
      console.log(`‚úÖ Notifica√ß√£o de teste enviada para ${testTokens.length} dispositivos`);
      return { success: true, tokensUsed: testTokens.length };
    } catch (error) {
      console.error('‚ùå Erro ao enviar notifica√ß√£o de teste:', error);
      return { success: false, tokensUsed: 0 };
    }
  }

  // Verificar status do scheduler
  getSchedulerStatus(): {
    isRunning: boolean;
    tasksCount: number;
    startedAt?: Date;
  } {
    return {
      isRunning: this.isSchedulerRunning,
      tasksCount: this.scheduledTasks.length,
      startedAt: this.isSchedulerRunning ? new Date() : undefined
    };
  }

  // Executar limpeza manual imediata
  async runImmediateCleanup(): Promise<{ 
    removed: number; 
    healthCheck: boolean; 
    stats: any 
  }> {
    try {
      console.log('üöÄ Executando limpeza imediata...');
      
      // Executar limpeza
      const cleanupResult = await this.cleanupExpiredTokens();
      
      // Executar health check
      const healthResult = await this.healthCheck();
      
      // Obter estat√≠sticas atualizadas
      let statsResult = null;
      if (this.deviceTokenRepository.getGeneralStats) {
        statsResult = await this.deviceTokenRepository.getGeneralStats();
      }
      
      console.log('‚úÖ Limpeza imediata conclu√≠da');
      
      return {
        removed: cleanupResult.removed,
        healthCheck: healthResult,
        stats: statsResult
      };
    } catch (error) {
      console.error('‚ùå Erro na limpeza imediata:', error);
      throw error;
    }
  }
}